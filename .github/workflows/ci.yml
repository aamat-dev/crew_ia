name: CI

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        node-version: ['18', '20']
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: dashboard/mini/package-lock.json

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          pip install ruff pytest-cov

      - name: Lint backend
        run: ruff check .

      - name: Test backend
        run: pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=85

      - name: Install frontend dependencies
        working-directory: dashboard/mini
        run: npm ci

      - name: Lint frontend
        working-directory: dashboard/mini
        run: npm run lint

      - name: Typecheck frontend
        working-directory: dashboard/mini
        run: npm run typecheck

      - name: Test frontend
        working-directory: dashboard/mini
        run: npm test -- --coverage

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-node${{ matrix.node-version }}
          path: |
            coverage.xml
            htmlcov
            dashboard/mini/coverage

  alembic-heads:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      - name: Check Alembic heads
        run: |
          HEADS=$(alembic heads | tee /tmp/heads | wc -l)
          if [ "$HEADS" -ne 1 ]; then
            echo "Multiple Alembic heads detected:"
            cat /tmp/heads
            exit 1
          fi

  coverage-merge:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage
          merge-multiple: true
      - name: Upload combined coverage
        uses: codecov/codecov-action@v4
        with:
          files: "coverage/**/coverage.xml,coverage/**/lcov.info"
          fail_ci_if_error: false

  vercel-deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: lint-and-test
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: dashboard/mini/package-lock.json
      - name: Install dependencies
        working-directory: dashboard/mini
        run: npm ci
      - name: Build
        working-directory: dashboard/mini
        run: npm run build
      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: dashboard/mini
          vercel-args: '--prebuilt --prod'
      - name: Afficher l’URL publique
        run: |
          echo "URL de déploiement: ${{ steps.deploy.outputs.preview-url }}"

  vercel-deploy-pr:
    if: github.event_name == 'pull_request'
    needs: lint-and-test
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: dashboard/mini/package-lock.json
      - name: Install dependencies
        working-directory: dashboard/mini
        run: npm ci
      - name: Build
        working-directory: dashboard/mini
        run: npm run build
      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: dashboard/mini
          vercel-args: '--prebuilt'
      - name: Afficher l’URL publique
        run: |
          echo "URL de déploiement: ${{ steps.deploy.outputs.preview-url }}"

  comment-preview:
    needs: vercel-deploy-pr
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Commenter l’URL de preview
        uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ needs.vercel-deploy-pr.outputs.preview-url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = process.env.PREVIEW_URL;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Preview Vercel : ${url}`
            });

  e2e-preview:
    needs:
      - lint-and-test
      - vercel-deploy
    if: ${{ needs.vercel-deploy.result == 'success' || github.ref != 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: dashboard/mini/package-lock.json
      - name: Install dependencies
        working-directory: dashboard/mini
        run: npm ci
      - name: Cache Playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('dashboard/mini/package-lock.json') }}
      - name: Install Playwright
        working-directory: dashboard/mini
        run: npx playwright install --with-deps
      - name: Echo PREVIEW_URL
        run: |
          if [ -n "${{ needs.vercel-deploy.outputs.preview-url }}" ]; then
            echo "Using Vercel preview URL"
          else
            echo "Using PREVIEW_URL secret"
          fi
      - name: Run E2E tests (preview)
        working-directory: dashboard/mini
        env:
          PREVIEW_URL: ${{ needs.vercel-deploy.outputs.preview-url || secrets.PREVIEW_URL }}
        run: npm run e2e:ci
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: dashboard/mini/playwright-report
      - name: Publish job summary
        if: always()
        env:
          PREVIEW_URL: ${{ needs.vercel-deploy.outputs.preview-url || secrets.PREVIEW_URL }}
        run: |
          echo "### E2E Preview" >> $GITHUB_STEP_SUMMARY
          echo "- URL: $PREVIEW_URL" >> $GITHUB_STEP_SUMMARY
          echo "- Rapport: voir artifact \`playwright-report\`" >> $GITHUB_STEP_SUMMARY
